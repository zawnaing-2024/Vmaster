# VMaster Ubuntu Server - Quick Setup Commands
# Copy-paste these command blocks on your Ubuntu 22.04 server

═══════════════════════════════════════════════════════════
STEP 1: FIX NGINX SSL ERROR
═══════════════════════════════════════════════════════════

# Remove broken config
rm /etc/nginx/sites-enabled/vmaster

# Create HTTP-only config (for getting SSL certificate)
cat > /etc/nginx/sites-available/vmaster << 'EOF'
server {
    listen 80;
    server_name vmaster.vip www.vmaster.vip;
    
    access_log /var/log/nginx/vmaster_access.log;
    error_log /var/log/nginx/vmaster_error.log;
    
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    client_max_body_size 50M;
}
EOF

# Enable site
ln -s /etc/nginx/sites-available/vmaster /etc/nginx/sites-enabled/

# Test and reload
nginx -t && systemctl reload nginx


═══════════════════════════════════════════════════════════
STEP 2: GET SSL CERTIFICATE
═══════════════════════════════════════════════════════════

# Install certbot (if not already installed)
apt install -y certbot python3-certbot-nginx

# Get SSL certificate (certbot will configure Nginx automatically!)
certbot --nginx -d vmaster.vip -d www.vmaster.vip

# Follow prompts:
# Email: your-email@example.com
# Terms: Y
# Redirect HTTP to HTTPS: 2 (Yes)


═══════════════════════════════════════════════════════════
STEP 3: VERIFY EVERYTHING WORKS
═══════════════════════════════════════════════════════════

# Test HTTPS
curl -I https://vmaster.vip

# Check Docker containers
docker ps

# Check Nginx
systemctl status nginx

# Access VMaster
# Visit: https://vmaster.vip/admin/login.php
# Login: admin / admin123


═══════════════════════════════════════════════════════════
STEP 4: FIRST TIME SETUP
═══════════════════════════════════════════════════════════

After accessing VMaster:

1. Login to admin panel
   https://vmaster.vip/admin/login.php
   Username: admin
   Password: admin123

2. CHANGE PASSWORD IMMEDIATELY!
   Go to: Change Password
   Set strong password

3. Add your first VPN server
   Go to: VPN Servers → Add Server

4. Create your first customer
   Go to: Customers → Add Customer

5. Enable RADIUS (optional)
   Edit: nano /var/www/vmaster/config/radius.php
   Set: RADIUS_ENABLED = true
   Restart: docker-compose -f docker-compose.prod.yml restart web


═══════════════════════════════════════════════════════════
USEFUL COMMANDS
═══════════════════════════════════════════════════════════

# View logs
docker logs -f vmaster_web

# Restart VMaster
docker-compose -f docker-compose.prod.yml restart

# Check RADIUS users
docker exec vmaster_radius_db mysql -uradius -pradiuspass radius -e "SELECT * FROM radcheck"

# Backup database
docker exec vmaster_db mysqldump -uroot -prootpassword vpn_cms_portal > backup.sql

# Update VMaster (in future)
cd /var/www/vmaster
./scripts/quick-update.sh


═══════════════════════════════════════════════════════════
✅ COMPLETE SETUP CHECKLIST
═══════════════════════════════════════════════════════════

[ ] Docker installed
[ ] VMaster cloned from GitHub
[ ] Containers running (docker ps)
[ ] Databases imported
[ ] Admin user created
[ ] Nginx installed
[ ] HTTP config working
[ ] SSL certificate obtained
[ ] HTTPS working
[ ] Admin login successful
[ ] Admin password changed
[ ] First VPN server added
[ ] First customer created
[ ] RADIUS enabled (if needed)
[ ] Backups configured
[ ] All tests passing


🎉 VMaster is now live in production!

